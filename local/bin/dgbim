#!/usr/local/bin/ruby
# require 'json/stream'
require 'json'
require 'uri'
require 'zlib'

# url = 'http://gb9.bimsop.com/peacock/1-1501661691279/1-1501661691279.gbim'
$GBIM_TEXTURE_PATH="http://gb9.bimsop.com/assets/m2/"
$GZIPED=false

def valid_json?(json)
  JSON.parse(json)
  return true
rescue JSON::ParserError => e
  return false
end

def downloadImage(uri)
  if uri.include?("##")
    uri = uri.gsub(/##/, "")
  end
  uri = uri.gsub(/\\/, "/")
  uriArr = uri.split("/")
  uriArr.pop()
  subDir = uriArr.join('/')
  system 'wget', URI.encode($GBIM_TEXTURE_PATH + uri), '-P', $modelFolder + subDir, :out=>:close, :err=>['/dev/null', 'a']
  puts $GBIM_TEXTURE_PATH + uri
end

def unzip(filePath)
  puts filePath
  if $GZIPED
    Zlib::GzipReader.open( filePath ) { |gz|
      decompressed = gz.read
      File.open( filePath , 'w'){|file| file.write(decompressed)}
    }
  end
rescue Zlib::GzipFile::Error => err
  return false
end

url = ARGV[0]
if !url
  puts 'invalid argument, try -> dgbim http://gb9.bimsop.com/peacock/1-1501661691279/1-1501661691279.gbim'
elsif !url.respond_to?(:to_s)
  puts 'invalid argument, try -> dgbim http://gb9.bimsop.com/peacock/1-1501661691279/1-1501661691279.gbim'
else
  puts '----------------Downloading------------------'
  if url.end_with? '.gbim'
    decoded = URI.decode(url) # gbim url

    arr = decoded.split('/')
    $modelName = arr[arr.length - 1].sub('.gbim', '')
    infoUrl = decoded.sub('.gbim', '.sum.json')

    basePath = decoded.sub($modelName + '.gbim', '')
    $modelFolder="#{ENV["HOME"]}/Downloads/models/#{$modelName}/";

    # download_output = system "wget #{URI.encode(infoUrl)} -P #{$modelFolder}", :out=>:close, :err=>['/dev/null', 'a']
    # puts infoUrl

    download_output = system 'wget', URI.encode(decoded), '-P', $modelFolder, :out=>:close, :err=>['/dev/null', 'a']

    if download_output
      puts decoded

      system "wget #{URI.encode(decoded.sub('.gbim', '.pi'))} -P #{$modelFolder}", :out=>:close, :err=>['/dev/null','a']
      puts decoded.sub('.gbim', '.pi')

      system "wget #{URI.encode(decoded.sub('.gbim', '.pc'))} -P #{$modelFolder}", :out=>:close, :err=>['/dev/null','a']
      puts decoded.sub('.gbim', '.pc')

      # download images
      # puts $modelFolder + $modelName + '.gbim'
      gbimStr = File.read($modelFolder + $modelName + '.gbim')
      if !valid_json?(gbimStr)
        Zlib::GzipReader.open($modelFolder + $modelName + '.gbim') {|gz|
          gbimStr = gz.read
          File.open($modelFolder + $modelName + '.gbim', 'w'){|file| file.write(gbimStr)}
        }
        unzip($modelFolder + $modelName + '.pi')
        unzip($modelFolder + $modelName + '.pc')
        $GZIPED=true
      end

      # puts gbimStr
      # gbim = JSON::Stream::Parser.parse(gbimStr);
      gbim = JSON.parse(gbimStr);
      images = gbim["images"];
      puts ''
      puts '---------------Checking Texture--------------'
      images.each { |index, imageInfo| downloadImage(imageInfo["uri"]) }

      # download buffers
      bufferCount = gbim["buffers"].length;
      count = 0
      puts ''
      puts '--------------Downloading Buffers-----------'
      while download_output
        break if count == bufferCount
        bin = ".#{count + 1}.bin"
        download_output = system "wget #{URI.encode(decoded.sub('.gbim', bin))} -P #{$modelFolder}", :out=>:close, :err=>['/dev/null','a']
        unzip($modelFolder + $modelName + bin)
        puts decoded.sub('.gbim', bin)
        count = count + 1
      end
      puts ''
      puts '------------------Finished-------------------'
    end
  else
    puts 'gbim download went wrong'
  end
end
